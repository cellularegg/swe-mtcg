@startuml
skinparam classAttributeIconSize 0

Interface ICard{
 +Guid Id
 +float Damage
 +string Name
 +CardType Type
 +float GetAttackValue(ICard other)
}

class AbstractCard{
 +Guid Id
 +float Damage
 +string Name
 +CardType Type
 +float GetAttackValue(ICard other)
}
ICard <|--- AbstractCard

class MonsterCard{
 -MonsterCardCreatureType _type
 +MonsterCardCreatureType GetCreatureType()
}
enum MonsterCardCreatureType{
 Human
 Goblin
 Wizard
 Dragon
 Ork
 Knight
 Kraken
 FireElv
}

class SpellCard{
 +double GetEffectivenessMultiplier(ICard other)
}
enum CardType{
 Normal
 Water
 Fire
}
AbstractCard <|-- MonsterCard
AbstractCard <|-- SpellCard

class User{
 +string LoginName
 +string NameTag
 +string Bio
 +string Status
 +float Elo
 +float Coins
 +List<ICard> Stack
 +GetGameHistory()
 +List<ICard>[4] Deck
}
User "1" *-- "5" Deck: has

class Deck {
 -cardList
 +Add()
 +Remove()
}

class "Client / Curl Script"{
 +Register()
 +Login()
 +CreatePackage()
 +AcquirePackage()
 +ShowAcquiredPackages()
 +ShowDeck()
 +ConfigureDeck()
 +EditUserData()
 +DisplayStats()
 +DisplayScoreboard()
 +Battle()
 +DisplayTradeDeals()
 +CreateTradingDeal() 
}


class TradeDeal {
 -Guid Id
 -string username
 -ICard _Card
 -CardType _WantedType
 -float _MinDamage
 +TradeDeal(string id, string username, ICard card, CardType type, float minDmg)
}

class Server{
 -List<User> _users
 -List<User> _usersLoggedIn
 -Dict<string, User> _tokens
 -List<ICard[5]> AvailablePackages
 -List<TradeDeal> TradeDeals
 +string Login(string username, string password)
 +string Register(string username, string password, optional: NameTag, Bio, Status)
 +bool VerifyToken(string Token)
 +string QueueForGame(User user)
 +string SimulateGame(User u1, User u2)
 +string GetStats(User u)
 +string GetScoreboard()
 +string RegisterCardForTrade(user u, Guid cardId)
 +string GetAllTradeDeals()
 +string TradeCard(string cardId, string tradeId)
 
}

@enduml